// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  username      String          @unique
  displayName   String
  passwordHash  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  authenticators Authenticator[]
  todos          Todo[]
  lists          List[]
}

model Authenticator {
  id                     String   @id @default(cuid())
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String

  // WebAuthn credential fields
  credentialID           Bytes    @unique
  credentialPublicKey    Bytes
  counter                Int
  credentialDeviceType   String   // e.g., "singleDevice" | "multiDevice"
  credentialBackedUp     Boolean
  transports             Json?
  aaguid                 String?

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userId])
}

model Todo {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  title      String
  completed  Boolean  @default(false)

  // 3D placement props (optional; used for piles/arrangement)
  posX       Float    @default(0)
  posY       Float    @default(0)
  posZ       Float    @default(0)
  pile       Int      @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model List {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  title      String
  // Optional placement for horizontal layout
  posX       Float    @default(0)
  posZ       Float    @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  items      Item[]

  @@index([userId])
}

model Item {
  id         String   @id @default(cuid())
  list       List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId     String

  title      String
  completed  Boolean  @default(false)
  sortOrder  Int      @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([listId])
}
